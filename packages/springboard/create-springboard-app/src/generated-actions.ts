// Auto-generated file - do not edit manually
// Generated from actions YAML files

export const actions = {
  "build_app": {
    "build_app/action.yml": "name: Build Springboard app\ndescription: A composite action to build a Springboard app.\n\ninputs:\n  entrypoint:\n    description: 'Entry point'\n    required: true\n  # output_directory:\n  #   description: 'Output'\n  #   required: true\n\nruns:\n  using: 'composite'\n  steps:\n  - name: Log Action Inputs\n    run: |\n      echo \"entrypoint: \${{ inputs.entrypoint }}\"\n      # echo \"output_directory: \${{ inputs.output_directory }}\"\n    shell: bash\n  - name: Install pnpm\n    uses: pnpm/action-setup@v4\n    with:\n      version: 10.15.0\n\n  - name: Install Node.js\n    uses: actions/setup-node@v4\n    with:\n      node-version: 20\n      cache: 'pnpm'\n\n  - name: Install modules\n    shell: bash\n    run: npm ci\n\n  \n    - name: Scaffold Springboard app\n      if: \${{ inputs.scaffold_springboard_project }}\n      run: |\n        mkdir -p apps\n        cd apps\n        npx create-springboard-app myapp --template bare\n\n- name: Build app\n    shell: bash\n    run: npm run build\n    env:\n      SPRINGBOARD_PLATFORM_VARIANT: main\n"
  },
  "build_desktop": {
    "build_desktop/action.yml": "name: Build Tauri App\ndescription: A composite action to build a Tauri app.\n\ninputs:\n  platform:\n    required: true\n    description: 'Platform to run on'\n  tauri_args:\n    required: true\n    description: 'Arguments for Tauri'\n  tauri_target:\n    required: true\n    description: 'Tauri build target'\n  sign_app:\n    required: true\n    description: 'Whether to sign the app'\n  profile:\n    required: true\n    description: 'Build profile (preview/development/production)'\n  site_url:\n    required: true\n    description: 'Site URL'\n  github_token:\n    required: true\n    description: 'GitHub token'\n  apple_certificate:\n    required: false\n    description: 'Apple certificate'\n  apple_certificate_password:\n    required: false\n    description: 'Apple certificate password'\n  apple_signing_identity:\n    required: false\n    description: 'Apple signing identity'\n  apple_id:\n    required: false\n    description: 'Apple ID'\n  apple_password:\n    required: false\n    description: 'Apple password'\n  apple_team_id:\n    required: false\n    description: 'Apple team ID'\n  enable_debug:\n    required: false\n    description: 'Enable debug'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Log Action Inputs\n      shell: bash\n      run: |\n        echo \"platform: \${{ inputs.platform }}\"\n        echo \"tauri_args: \${{ inputs.tauri_args }}\"\n        echo \"tauri_target: \${{ inputs.tauri_target }}\"\n        echo \"sign_app: \${{ inputs.sign_app }}\"\n        echo \"profile: \${{ inputs.profile }}\"\n        echo \"site_url: \${{ inputs.site_url }}\"\n        echo \"enable_debug: \${{ inputs.enable_debug }}\"\n\n    - name: Install pnpm\n      uses: pnpm/action-setup@v4\n      with:\n        version: 10.15.0\n\n    - name: Install Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 20\n        cache: 'pnpm'\n\n    - name: Install Rust stable\n      uses: dtolnay/rust-toolchain@stable\n\n    - name: Install OS dependencies (ubuntu only)\n      shell: bash\n      if: inputs.platform == 'ubuntu-22.04'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf\n\n    - name: Install project node modules\n      shell: bash\n      run: npm ci\n\n    \n    - name: Scaffold Springboard app\n      if: \${{ inputs.scaffold_springboard_project }}\n      run: |\n        mkdir -p apps\n        cd apps\n        npx create-springboard-app myapp --template bare\n\n- name: Build app\n      shell: bash\n      run: |\n        touch .env\n        npm run build-desktop\n      env:\n        PUBLIC_SITE_URL: \${{ inputs.site_url }}\n        EXPO_PUBLIC_SITE_URL: \${{ inputs.site_url }}\n        SENTRY_DSN: ''\n        SPRINGBOARD_PLATFORM_VARIANT: desktop\n        APP_PROFILE: \${{ inputs.profile }}\n\n    - name: Prebuild Tauri app\n      shell: bash\n      run: |\n        npm run prebuild\n      working-directory: ./apps/desktop_tauri\n      env:\n        APP_PROFILE: \${{ inputs.profile }}\n\n    - name: Fetch Rust dependencies\n      shell: bash\n      run: cargo fetch\n      working-directory: ./apps/desktop_tauri/src-tauri\n\n    - name: Conditionally Install Rust Target (macOS)\n      shell: bash\n      if: inputs.platform == 'macos-latest'\n      run: |\n        rustup target add aarch64-apple-darwin\n        rustup target add x86_64-apple-darwin\n\n    - name: Set macOS signing environment variables\n      shell: bash\n      if: inputs.sign_app == 'true' && inputs.platform == 'macos-latest'\n      run: |\n        if \${{ inputs.sign_app }}; then\n          echo \"APPLE_CERTIFICATE=\${{ inputs.apple_certificate }}\" >> $GITHUB_ENV\n          echo \"APPLE_CERTIFICATE_PASSWORD=\${{ inputs.apple_certificate_password }}\" >> $GITHUB_ENV\n          echo \"APPLE_SIGNING_IDENTITY=\${{ inputs.apple_signing_identity }}\" >> $GITHUB_ENV\n          echo \"APPLE_ID=\${{ inputs.apple_id }}\" >> $GITHUB_ENV\n          echo \"APPLE_PASSWORD=\${{ inputs.apple_password }}\" >> $GITHUB_ENV\n          echo \"APPLE_TEAM_ID=\${{ inputs.apple_team_id }}\" >> $GITHUB_ENV\n        fi\n\n    # - name: Set Tauri log level\n    #   run: echo \"TAURI_LOG=trace\" >> $GITHUB_ENV\n    #   shell: bash\n\n    - name: Build Tauri app\n      run: npm run tauri build -- \${{ inputs.tauri_args }} \${{ (inputs.enable_debug && '--debug') || '' }}\n      working-directory: ./apps/desktop_tauri\n      shell: bash\n\n    # - uses: tauri-apps/tauri-action@v0\n    #   env:\n    #     GITHUB_TOKEN: \${{ inputs.github_token }}\n    #   with:\n    #     projectPath: 'apps/desktop_tauri'\n    #     includeDebug: true\n    #     includeRelease: true\n    #     # tagName: app-v__VERSION__ # the action automatically replaces \\_\\_VERSION\\_\\_ with the app version.\n    #     # releaseName: 'App v__VERSION__'\n    #     # releaseBody: 'See the assets to download this version and install.'\n    #     # releaseDraft: true\n    #     # prerelease: false\n    #     args: \${{ inputs.tauri_args }}\n\n    # - name: Archive built artifacts\n    #   shell: bash\n    #   run: |\n    #     # Find all \`bundle\` directories\n    #     find ./apps/desktop_tauri/src-tauri/target -type d -name \"bundle\" | while read -r dir; do\n    #       # Extract the relative path starting after \`target/\`\n    #       RELATIVE_PATH=\"\${dir#./apps/desktop_tauri/src-tauri/target/}\"\n\n    #       # Copy the \`bundle\` directory to the corresponding artifacts folder\n    #       DEST_DIR=\"artifacts/\${{ inputs.platform }}/$(dirname \"$RELATIVE_PATH\")\"\n    #       mkdir -p \"$DEST_DIR\"\n    #       cp -r \"$dir\" \"$DEST_DIR\"\n    #     done\n\n    # - name: Upload build artifacts\n    #   uses: actions/upload-artifact@v4\n    #   with:\n    #     name: tauri-build-\${{ inputs.platform }}-\${{ inputs.tauri_target }}\n    #     path: artifacts/\${{ inputs.platform }}\n"
  }
};

export default actions;
